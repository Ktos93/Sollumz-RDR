
# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
## Changelog\n
"""

body = """\
{% set maintainers_usernames = "Skylumz|coltfox|alexguirre" %}\
\
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
  ### {{ group | striptags | trim | upper_first }}
  {% for commit in commits %}
    * \
    {% if commit.scope %}\
      *({{ commit.scope }})* \
    {% endif %}\
    {{ commit.message | upper_first }}. \
      (\
        {% if commit.links %}\
          {% for link in commit.links | sort(attribute="href") %}\
            {{ link.href }}, \
          {% endfor %}\
        {% endif %}\
        {{ commit.id  }}\
      )\
      {% if commit.github.username and not commit.github.username is matching(maintainers_usernames) %}\
        {{ " " }}[@{{ commit.github.username }}]\
      {% endif %}\
  {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->Features" },
    { message = "^fix", group = "<!-- 1 -->Bug Fixes" },
    { message = "^tweak", group = "<!-- 2 -->Other Changes" },
    { message = "^perf", group = "<!-- 3 -->Performance" },
    { message = "^refactor", group = "<!-- 4 -->Refactor" },
    { message = "^style", skip = true },
    { message = "^test", skip = true },
    { message = "^chore", skip = true },
    { message = "^ci", skip = true },
]
link_parsers = [
    { pattern = "#(\\d+)", href = "#$1"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

[remote.github]
owner = "Skylumz"
repo = "Sollumz"

